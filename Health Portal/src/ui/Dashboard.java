package ui;

import java.awt.CardLayout;
import java.awt.Color;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Encounter;
import model.House;
import model.Patient;
import model.Person;
import model.Sys;
import model.User;
import model.UserDirectory;
import model.VitalSigns;
import utility.UtilityFunctions;

/**
 *
 * @author  Mihir Mehta / Hechen Gao
 */
public class Dashboard extends javax.swing.JPanel {
  
    private JPanel userProcessContainer;
    private Sys sys;
    Patient selectedPatient;
    private HomeScreen homeScreen;
    ImageIcon icon;
    private Encounter selectedEncounter;
    boolean abnormalitiesFlag = false;
    
    public Dashboard(JPanel userProcessContainer,Sys sys,HomeScreen homeScreen) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.sys = sys;
        this.homeScreen = homeScreen;
        setSize(1040, 544);
        makeUnEditable();
        populateTableInitially();
        clearFields();
        emptyCommunityComboBox();
        loadCommunity();
        loadCity();
        
    }
    
    public void makeUnEditable(){
    
        txtBP_LOW.setEnabled(false);
        txtBP_HIGH.setEnabled(false);
        txtHeartRate.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        
    }
    
     public void makeEditable(){
    
        txtBP_LOW.setEnabled(true);
        txtBP_HIGH.setEnabled(true);
        txtHeartRate.setEnabled(true);
    }
    
    public void loadCommunity(){
    
    
    for(City city: sys.getCityList()){
        
        for(Community com: city.getCommList()){
            cmbCommunitySearch.addItem(com.getCommName());
        }
        }   
    }
    
    public void loadCity(){
    
    
    for(City city: sys.getCityList()){
        
        cmbCity.addItem(city.getCitName());
    }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField4 = new javax.swing.JTextField();
        txtAddr = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        tblEncounterHistory = new javax.swing.JScrollPane();
        tblEncHist = new javax.swing.JTable();
        lblEncounterHist = new javax.swing.JLabel();
        lblBP = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        txtBP_LOW = new javax.swing.JTextField();
        lblName2 = new javax.swing.JLabel();
        txtBP_HIGH = new javax.swing.JTextField();
        lblSlash = new javax.swing.JLabel();
        txtHeartRate = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btnSearch = new javax.swing.JButton();
        lblBP1 = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        cmbCommunitySearch = new javax.swing.JComboBox<>();
        lblCity = new javax.swing.JLabel();
        cmbCity = new javax.swing.JComboBox<>();
        btnSowAbnormalities = new javax.swing.JButton();
        chkSearch = new javax.swing.JCheckBox();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblCommunity1 = new javax.swing.JLabel();
        cmbAgeGroup = new javax.swing.JComboBox<>();

        jTextField4.setText("jTextField4");

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(650, 600));

        txtAddr.setWheelScrollingEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        txtAddr.setViewportView(jTextArea1);

        tblEncHist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Community", "Pa. ID", "Name", "Age", "EncounterId", "Systolic BP", "Diastolic BP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEncounterHistory.setViewportView(tblEncHist);
        if (tblEncHist.getColumnModel().getColumnCount() > 0) {
            tblEncHist.getColumnModel().getColumn(0).setResizable(false);
            tblEncHist.getColumnModel().getColumn(1).setResizable(false);
            tblEncHist.getColumnModel().getColumn(2).setResizable(false);
            tblEncHist.getColumnModel().getColumn(3).setResizable(false);
            tblEncHist.getColumnModel().getColumn(4).setResizable(false);
            tblEncHist.getColumnModel().getColumn(5).setResizable(false);
            tblEncHist.getColumnModel().getColumn(6).setResizable(false);
            tblEncHist.getColumnModel().getColumn(7).setResizable(false);
        }

        lblEncounterHist.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        lblEncounterHist.setForeground(new java.awt.Color(0, 0, 0));
        lblEncounterHist.setText("Encounter Histories");

        lblBP.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblBP.setForeground(new java.awt.Color(0, 0, 0));
        lblBP.setText("Blood pressure:");

        lblHeartRate.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblHeartRate.setForeground(new java.awt.Color(0, 0, 0));
        lblHeartRate.setText("Heart Rate:");

        txtBP_LOW.setText("90");

        lblName2.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblName2.setForeground(new java.awt.Color(0, 0, 0));
        lblName2.setText("/");

        txtBP_HIGH.setText("150");

        lblSlash.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblSlash.setForeground(new java.awt.Color(0, 0, 0));
        lblSlash.setText("mm Hg");

        txtHeartRate.setText("72");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(17, 125, 161));

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblBP1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        lblBP1.setForeground(new java.awt.Color(0, 0, 0));
        lblBP1.setText("Search by:");

        lblCommunity.setForeground(new java.awt.Color(0, 0, 0));
        lblCommunity.setText("Community:");

        cmbCommunitySearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblCity.setForeground(new java.awt.Color(0, 0, 0));
        lblCity.setText("City:");

        cmbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSowAbnormalities.setText("Abnormalities");
        btnSowAbnormalities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSowAbnormalitiesActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblCommunity1.setForeground(new java.awt.Color(0, 0, 0));
        lblCommunity1.setText("Age Group:");

        cmbAgeGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "1 - 6", "6 - 17", "18 - 40", "41+" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblBP1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(chkSearch))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lblCommunity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbCommunitySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblCommunity1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbAgeGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(240, 240, 240)
                                        .addComponent(lblEncounterHist)))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(btnSowAbnormalities))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(128, 128, 128)
                                        .addComponent(lblCity)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(tblEncounterHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblBP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBP_LOW, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(lblName2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBP_HIGH, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSlash))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(btnView)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(lblHeartRate)
                                .addGap(18, 18, 18)
                                .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddr, 0, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBP_LOW, txtHeartRate});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbCity, cmbCommunitySearch});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(lblEncounterHist, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(tblEncounterHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblBP1)
                                .addComponent(chkSearch))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSearch)
                                .addComponent(btnSowAbnormalities)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCommunity)
                                .addComponent(cmbCommunitySearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCommunity1)
                                .addComponent(cmbAgeGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCity)
                                .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBP)
                    .addComponent(txtBP_LOW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName2)
                    .addComponent(txtBP_HIGH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSlash))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeartRate)
                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnView)
                    .addComponent(btnDelete))
                .addContainerGap(84, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        if(chkSearch.isSelected()){
            
            //Search logic
            populateTableBySearch();
            
        }else JOptionPane.showMessageDialog(this, "Search is OFF");
        
        
        
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private void populateTableBySearch() {
        
        DefaultTableModel model = (DefaultTableModel) tblEncHist.getModel();
        
        //Delete empty rows
        model.setRowCount(0);
        
        //Filter patients by community & city
        ArrayList<Patient> filteredPatients = new ArrayList<Patient>();
        
        //Get community wise filtered patients
        filteredPatients.addAll(getFilteredPatientsTerritoryWise());
                
        //Create an array for search results
        ArrayList<Encounter> searchList = new ArrayList<>();
        
        //Populate the list with search appropriate values
        searchList.addAll(getFilteredEncountersList(filteredPatients));
        
        
        for(Encounter enc:searchList){
            
            //Get patient from encounter
            Patient allPatient = sys.getPatientFromVisit(enc);
            
            //Filter age-groups
            if(!cmbAgeGroup.getSelectedItem().equals("-") && filterAge(allPatient, enc)){
                continue;
            }
            
            if(abnormalitiesFlag){
                
                //Conditions for Low & high BP
                /*if(enc.getVital().getBloodPressure_LOW() < 120.5 && enc.getVital().getBloodPressure_LOW() > 114.5 && enc.getVital().getBloodPressure_HIGH() < 78.5 && enc.getVital().getBloodPressure_HIGH() > 75.5){
                    continue;
                }*/
                
                //Filter by age
                
                if(cmbAgeGroup.getSelectedItem().equals("-")){
                    JOptionPane.showMessageDialog(this, "Select age group!");
                    return;
                }
                if(!filterByAge(allPatient,enc) && !cmbAgeGroup.getSelectedItem().equals("-") && abnormalitiesFlag){
                    continue;
                }
                
            }
            
            
            
            
            Object[] row = new Object[8]; // Number of elements in the table - 6
                row[0] = enc;//.getName();
                row[2] = sys.getPatDir().getPatientFromEncounter(enc).getId()+"";
                row[5] = enc.getId();
                row[6] = enc.getVital().getBloodPressure_LOW();
                row[7] = enc.getVital().getBloodPressure_HIGH();
                row[4] = allPatient.getPerson().getAge()+"";
                
                //Get house
                House selectHouse = sys.findHouseInCity(allPatient.getPerson());
                
                row[1] = selectHouse.getCommunity();
                row[3] = allPatient.getPerson().getName();
            
            model.addRow(row);
        }
        
        if(searchList.size() == 0){
            JOptionPane.showMessageDialog(this, "No results");
        }
        
        abnormalitiesFlag = false;
    }
    
    public boolean filterByAge(Patient pat, Encounter enc){
    
    
        //Get on-screen filters
        String ageGroup = (String)cmbAgeGroup.getSelectedItem();
        
        //Get age
        int age = pat.getPerson().getAge();
        double sysBP = enc.getVital().getBloodPressure_LOW();
        double diaBP = enc.getVital().getBloodPressure_HIGH();
        
        switch(ageGroup){
        
            case "1 - 6":
                
                if(age >= 1 && age < 6){
                    
                    if((sysBP < 110 && sysBP > 90) || (diaBP < 73 && diaBP > 55)){
                        return false;
                    }
                    
                }
                
                break;
                
            case "6 - 17":
                
                if(age >= 6 && age <= 17){
                    
                    if((sysBP < 124 && sysBP > 110) || (diaBP < 79 && diaBP > 70)){
                        return false;
                    }
                    
                }
                
                break;
             
            case "18 - 40":
                
                if(age >= 18 && age <= 40){
                    
                    if((sysBP < 135 && sysBP > 95) || (diaBP < 80 && diaBP > 60)){
                        return false;
                    }
                    
                }
                
                break;
            
            case "41+":
                
                if(age >= 41){
                    
                    if((sysBP < 145 && sysBP > 110) && (diaBP < 90 && diaBP > 70)){
                        return false;
                    }
                    
                }
                
                break;
        }
        
        return true;
    }
    
    public boolean filterAge(Patient pat, Encounter enc){
    
    
        //Get on-screen filters
        String ageGroup = (String)cmbAgeGroup.getSelectedItem();
        
        //Get age
        int age = pat.getPerson().getAge();
        double sysBP = enc.getVital().getBloodPressure_LOW();
        double diaBP = enc.getVital().getBloodPressure_HIGH();
        
        switch(ageGroup){
        
            case "1 - 6":
                
                if((age >= 1 && age < 6)){
                    
                    return false;
                    
                }
                
                break;
                
            case "6 - 17":
                
                if((age >= 6 && age <= 17)){
                    
                        return false;
                    
                }
                
                break;
             
            case "18 - 40":
                
                if((age >= 18 && age <= 40)){
                    
                        return false;
                    
                }
                
                break;
            
            case "41+":
                
                if((age >= 41)){
                    
                        return false;
                    
                }
                
                break;
        }
        
        return true;
    }
    
    public ArrayList<Encounter> getFilteredEncountersList(ArrayList<Patient> filteredPatients){
    
        
        ArrayList<Encounter> filteredEncounter = new ArrayList<Encounter>();
        
        for(Patient pat:filteredPatients){
        
            //List with all patients data
            ArrayList<Encounter> allEncounter = pat.getEncounterHistory().getEncounterList();
            
            for(Encounter enc: allEncounter){
                
                filteredEncounter.add(enc);
                
                
                
            }
            
        }
        
        return filteredEncounter;
    }
    
    public ArrayList<Patient> getFilteredPatientsTerritoryWise(){
        
        ArrayList<Patient> patientList = new ArrayList<Patient>();
        
        //List with all patients data
        ArrayList<Patient> allPatient = sys.getPatDir().getPatientList();
        
        //Get applied filters
        
        String communitySearch = (String)cmbCommunitySearch.getSelectedItem();
        String citySearch = (String)cmbCity.getSelectedItem();
        
        //Start filtering
        int addPatientFilterPassCount = 0;
        int nullFilterPassCount = 0;
        
        for(Patient individualPat:allPatient){
            
           //Initial count to 0
           addPatientFilterPassCount = 0; 
           nullFilterPassCount = 0;
           
            //Filter for manufacturer
            if(!communitySearch.equals("-")){
                try{
                    House house = sys.findHouseInCity(individualPat.getPerson());
                    
                    if(house.getCommunity().equals(communitySearch)){
                        addPatientFilterPassCount += 1;
                    }
                }catch(Exception e){
                    
                }
            }else {
                nullFilterPassCount += 1;
            }
            
            
            //Filter for manufacturer
            if(!citySearch.equals("-")){
                try{
                    if(sys.findHouseInCity(individualPat.getPerson()).getCity().equals(citySearch)){
                        addPatientFilterPassCount += 1;
                    }
                }catch(Exception e){
                    
                }
            }else {
                nullFilterPassCount += 1;
            }
            
            
            if(addPatientFilterPassCount + nullFilterPassCount == 2){
                patientList.add(individualPat);
            }
        }
        
        return patientList;
    }
    
    public void emptyCommunityComboBox(){
    
        cmbCommunitySearch.removeAllItems();
        cmbCommunitySearch.addItem("-");
        cmbCity.removeAllItems();
        cmbCity.addItem("-");
    }
    
    
    
    public void populateTableForAllPatients(){
    
        for(Patient pat:sys.getPatDir().getPatientList()){
            populateTable(pat);
        }
        
    }
    
    private void populateTable(Patient selPatient) {
        
        DefaultTableModel model = (DefaultTableModel) tblEncHist.getModel();
        
        //Delete empty rows
        model.setRowCount(0);
        
        for(Encounter enc:selPatient.getEncounterHistory().getEncounterList()){
            
            Object[] row = new Object[8]; // Number of elements in the table - 6
                row[0] = enc;//.getName();
                row[2] = sys.getPatDir().getPatientFromEncounter(enc).getId()+"";
                row[5] = enc.getId();
                row[6] = enc.getVital().getBloodPressure_LOW();
                row[7] = enc.getVital().getBloodPressure_HIGH();
                row[4] = selPatient.getPerson().getAge()+"";
                
                //Get house
                House selectHouse = sys.findHouseInCity(selPatient.getPerson());
                
                row[1] = selectHouse.getCommunity();
                row[3] = selPatient.getPerson().getName();
            
            model.addRow(row);
        }
        
        
        
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        if(!validations()){
            return;
        }

        saveValues();

        JOptionPane.showMessageDialog(this, "Visit updated");

        populateTableInitially();
        
        makeUnEditable();
        clearFields();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblEncHist.getSelectedRow();
        
        if(selectedRow < 0){
            
            JOptionPane.showMessageDialog(this, "Please select a row");
        
        }else{
            
            //Make them uneditable
            makeUnEditable();
                    
            // Populate the fields
            //onlySelectedCar = selectedRow;
            
            //Handle Null pointer for empty values
            try{
                DefaultTableModel model = (DefaultTableModel) tblEncHist.getModel();
                Encounter selectEncounter = (Encounter) model.getValueAt(selectedRow, 0);
                selectedEncounter = selectEncounter;
                populateFields(selectEncounter);
            
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Select valid entry");
            }
            
            
        }
        //Populate personal details
        populatePersonalDetails(sys.getPatDir().getPatientFromEncounter(selectedEncounter));
    
    
        
        makeEditable();
        
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
    }//GEN-LAST:event_btnViewActionPerformed
    
    public void populatePersonalDetails(Patient patient){
      
                        
        Person person = patient.getPerson();
    
        UtilityFunctions utility = new UtilityFunctions();
        
        //Display the image
        
        try{
        if(!person.getImagePath().equals("")){
            icon = new ImageIcon(person.getImagePath());
        }else {
            icon = new ImageIcon("AED_ASS_4_user.png");
        }
        }catch(Exception e){
            icon = new ImageIcon("AED_ASS_4_user.png");
        }
        
        
        
        
    }
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        sys.getPatDir().getPatientFromEncounter(selectedEncounter).getEncounterHistory().getEncounterList().remove(selectedEncounter);
        
        JOptionPane.showMessageDialog(this, "Record deleted");
        
        populateTableInitially();

        clearFields();
        
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSowAbnormalitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSowAbnormalitiesActionPerformed
        // TODO add your handling code here:
        
        abnormalitiesFlag = true;
        if(chkSearch.isSelected()){
            populateTableBySearch();
        }else JOptionPane.showMessageDialog(this, "Search is OFF");
        abnormalitiesFlag = false;
    }//GEN-LAST:event_btnSowAbnormalitiesActionPerformed

    private void populateFields(Encounter selectedEncounter) {
        
            
        txtBP_LOW.setText(selectedEncounter.getVital().getBloodPressure_LOW()+"");
        txtBP_HIGH.setText(selectedEncounter.getVital().getBloodPressure_HIGH()+"");
        txtHeartRate.setText(selectedEncounter.getVital().getHeartRate()+"");
        
    }
    
    public void populateDate(){
        
        UtilityFunctions util = new UtilityFunctions();
        
        //lblTodaysData.setText(util.covertDateToString(LocalDate.now()));
        
    }    
    public void saveValues(){
        
        UtilityFunctions util = new UtilityFunctions();
        
        double BP_LOW = util.convertToDouble(txtBP_LOW.getText());
        double BP_HIGH = util.convertToDouble(txtBP_HIGH.getText());
        double HR = util.convertToDouble(txtHeartRate.getText());
        
        selectedEncounter.getVital().setBloodPressure_HIGH(BP_HIGH);
        selectedEncounter.getVital().setBloodPressure_LOW(BP_LOW);
        selectedEncounter.getVital().setHeartRate(HR);
        
    }
    public boolean validations(){
        
       UtilityFunctions utility = new UtilityFunctions();
        
        //Field validations
        boolean valFlag = true;
        int misCounter = 0;
        int temp = 0;
        
        //Error Message
        String errorMessage = "";
        
        //1. BP Low Number ***************************************************************************
        
        // TC.1 - No Null value
        temp = misCounter;
        misCounter = misCounter + utility.runValidation(".+",txtBP_LOW.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in BP-Low field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^([^!@#$%^&*()]*)$",txtBP_LOW.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in BP-Low field"+"\n";
        }
        
        //TC.3 - Only numbers
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^[0-9]*\\.?[0-9]*$",txtBP_LOW.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Please enter numbers in city field"+"\n";
        }
        
       //2. BP High Number ***************************************************************************
       
       // TC.1 - No Null value
        temp = misCounter;
        misCounter = misCounter + utility.runValidation(".+",txtBP_HIGH.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in BP-Low field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^([^!@#$%^&*()]*)$",txtBP_HIGH.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in BP-Low field"+"\n";
        }
        
        //TC.3 - Only numbers
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^[0-9]*\\.?[0-9]*$",txtBP_HIGH.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Please enter numbers in city field"+"\n";
        }
        
        
       //3. Heart rate ***************************************************************************
       // TC.1 - No Null value
        temp = misCounter;
        misCounter = misCounter + utility.runValidation(".+",txtHeartRate.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Missing value in BP-Low field"+"\n";
        }
        
        //TC.2 - No special characters
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^([^!@#$%^&*()]*)$",txtHeartRate.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Remove special characters in BP-Low field"+"\n";
        }
        
        //TC.3 - Only numbers
        temp = misCounter;
        misCounter = misCounter + utility.runValidation("^[0-9]*\\.?[0-9]*$",txtHeartRate.getText());
        
        //Add message
        if(temp != misCounter){
            errorMessage = errorMessage + "Please enter numbers in city field"+"\n";
        }
       
       
       // ********************************************************************************************
        // Check validations
        if(misCounter > 0){
           JOptionPane.showMessageDialog(this, errorMessage);
           valFlag = false;
        }
        // ********************************************************************************************
        
        
        return valFlag;
        
    }

    
    public void populateDetails(Patient selectedPatient){
    
        //Patient section
        populatePersonSection(selectedPatient);
        
        //Encounter section
        
        
        
    }
    
     public void clearFields(){
        
        txtBP_LOW.setText("");
        txtBP_HIGH.setText("");
        txtHeartRate.setText("");
        
        //Display the image
        icon = new ImageIcon("C://Users//user//Documents//NetBeansProjects//Lab_3_Skeleton//src//res//AED_ASS_4_user.png");
        //icon = utility.scaleImage(icon, 320, 240);
        
        
    }
    
    public void populatePersonSection(Patient selectedPatient){
        
        Person person = selectedPatient.getPerson();
        UtilityFunctions utility = new UtilityFunctions();
        

        //Display the image
        icon = new ImageIcon(person.getImagePath());
        //icon = utility.scaleImage(icon, 320, 240);
        
    }
    
    
    private void populateTableInitially() {
        
        DefaultTableModel model = (DefaultTableModel) tblEncHist.getModel();
        
        //Delete empty rows
        model.setRowCount(0);
        
        ArrayList<Encounter> allEncounter = new ArrayList<Encounter>();
        
        for(Patient allPatient:sys.getPatDir().getPatientList()){
            
            for(Encounter enc:allPatient.getEncounterHistory().getEncounterList()){

                Object[] row = new Object[8]; // Number of elements in the table - 6
                row[0] = enc;//.getName();
                row[2] = sys.getPatDir().getPatientFromEncounter(enc).getId()+"";
                row[5] = enc.getId();
                row[6] = enc.getVital().getBloodPressure_LOW();
                row[7] = enc.getVital().getBloodPressure_HIGH();
                row[4] = allPatient.getPerson().getAge()+"";
                
                //Get house
                try{
                House selectHouse = sys.findHouseInCity(allPatient.getPerson());
                row[1] = selectHouse.getCommunity();

                }catch(Exception e){
                row[1] = "Brandies";
                }
                
                row[3] = allPatient.getPerson().getName();
                model.addRow(row);
            }
        }
        
        
        
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSowAbnormalities;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JCheckBox chkSearch;
    private javax.swing.JComboBox<String> cmbAgeGroup;
    private javax.swing.JComboBox<String> cmbCity;
    private javax.swing.JComboBox<String> cmbCommunitySearch;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblBP;
    private javax.swing.JLabel lblBP1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblCommunity1;
    private javax.swing.JLabel lblEncounterHist;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblSlash;
    private javax.swing.JTable tblEncHist;
    private javax.swing.JScrollPane tblEncounterHistory;
    private javax.swing.JScrollPane txtAddr;
    private javax.swing.JTextField txtBP_HIGH;
    private javax.swing.JTextField txtBP_LOW;
    private javax.swing.JTextField txtHeartRate;
    // End of variables declaration//GEN-END:variables

    
}
